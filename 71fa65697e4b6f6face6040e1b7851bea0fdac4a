{
  "comments": [
    {
      "unresolved": true,
      "key": {
        "uuid": "f5efe5ed_5aa3bef1",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 15,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2022-11-28T20:44:21Z",
      "side": 1,
      "message": "What did you mean with this sentence? Can you rephrase?",
      "range": {
        "startLine": 14,
        "startChar": 0,
        "endLine": 15,
        "endChar": 58
      },
      "revId": "71fa65697e4b6f6face6040e1b7851bea0fdac4a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "46f68235_f0168c83",
        "filename": "/COMMIT_MSG",
        "patchSetId": 1
      },
      "lineNbr": 33,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2022-11-28T20:48:38Z",
      "side": 1,
      "message": "Missing Issue id",
      "revId": "71fa65697e4b6f6face6040e1b7851bea0fdac4a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ff15239e_7e937e07",
        "filename": "owners-autoassign/src/test/java/com/googlesource/gerrit/owners/common/AbstractAutoassignIT.java",
        "patchSetId": 1
      },
      "lineNbr": 223,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2022-11-28T20:44:21Z",
      "side": 1,
      "message": "What about adding a test showing that if the fallback doesn\u0027t match anything then no reviewers will be added? WDYT?",
      "revId": "71fa65697e4b6f6face6040e1b7851bea0fdac4a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "79e5a1ff_36164f2c",
        "filename": "owners-autoassign/src/test/java/com/googlesource/gerrit/owners/common/AbstractAutoassignIT.java",
        "patchSetId": 1
      },
      "lineNbr": 353,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2022-11-28T20:47:08Z",
      "side": 1,
      "message": "nit: consider chaining append calls\n\n```\n      ownersString\n          .append(\"- \")\n          .append(matchingType)\n          .append(\": \")\n          .append(patternMatch)\n          .append(\"\\n\")\n          .append(\"  \")\n          .append(section)\n          .append(\":\\n\")\n          .append(\"  - \")\n          .append(ownerEmail)\n          .append(\"\\n\");\n```",
      "range": {
        "startLine": 342,
        "startChar": 1,
        "endLine": 353,
        "endChar": 22
      },
      "revId": "71fa65697e4b6f6face6040e1b7851bea0fdac4a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "9707674f_781ba117",
        "filename": "owners-autoassign/src/test/java/com/googlesource/gerrit/owners/common/AbstractAutoassignIT.java",
        "patchSetId": 1
      },
      "lineNbr": 361,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2022-11-28T20:47:08Z",
      "side": 1,
      "message": "nit: consider renaming `ownersString` to `ownersStringBuilder`",
      "range": {
        "startLine": 361,
        "startChar": 12,
        "endLine": 361,
        "endChar": 35
      },
      "revId": "71fa65697e4b6f6face6040e1b7851bea0fdac4a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "8f19b836_245211db",
        "filename": "owners-common/src/main/java/com/googlesource/gerrit/owners/common/GenericMatcher.java",
        "patchSetId": 1
      },
      "lineNbr": 1,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2022-11-28T20:10:06Z",
      "side": 1,
      "message": "nit: s/2017/2022",
      "range": {
        "startLine": 1,
        "startChar": 17,
        "endLine": 1,
        "endChar": 21
      },
      "revId": "71fa65697e4b6f6face6040e1b7851bea0fdac4a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "3dd91427_db0e22c4",
        "filename": "owners-common/src/main/java/com/googlesource/gerrit/owners/common/PathOwners.java",
        "patchSetId": 1
      },
      "lineNbr": 225,
      "author": {
        "id": 1072905
      },
      "writtenOn": "2022-11-28T20:47:08Z",
      "side": 1,
      "message": "nit: instead of having two passes to separate regular and generic matchers, consider using partitioning the list.\n\n```\nfullMatchers.values().stream().collect(Collectors.partitioningBy(m -\u003e m instanceof GenericMatcher));\n```",
      "revId": "71fa65697e4b6f6face6040e1b7851bea0fdac4a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "5ec1ad85_20bdd51c",
        "filename": "owners-common/src/main/java/com/googlesource/gerrit/owners/common/PathOwners.java",
        "patchSetId": 1
      },
      "lineNbr": 228,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2022-11-28T20:44:21Z",
      "side": 1,
      "message": "You could probably use `Collectors.partitioningBy` to partition this list and avoid processing it twice.\n\nSomething like:\n\n```\nMap\u003cBoolean, List\u003cMatcher\u003e\u003e matchersGroups \u003d fullMatchers.values().stream()\n    .collect(Collectors.partitioningBy(matcher -\u003e (matcher instanceof GenericMatcher)));\n    \nList\u003cMatcher\u003e generic \u003d matchersGroups.get(true);\nList\u003cMatcher\u003e nonGeneric \u003d matchersGroups.get(false);\n\n```",
      "range": {
        "startLine": 225,
        "startChar": 0,
        "endLine": 228,
        "endChar": 42
      },
      "revId": "71fa65697e4b6f6face6040e1b7851bea0fdac4a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "ca9303e1_4ae7292e",
        "filename": "owners-common/src/main/java/com/googlesource/gerrit/owners/common/PathOwners.java",
        "patchSetId": 1
      },
      "lineNbr": 244,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2022-11-28T20:10:06Z",
      "side": 1,
      "message": "unreachable code? `isCatchallGenericMatcher` is a subset of `matcher instanceof GenericMatcher` condition IOW AFAIU in will be examined in line #237 already...",
      "range": {
        "startLine": 241,
        "startChar": 4,
        "endLine": 244,
        "endChar": 42
      },
      "revId": "71fa65697e4b6f6face6040e1b7851bea0fdac4a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "577f4da7_130589b3",
        "filename": "owners-common/src/main/java/com/googlesource/gerrit/owners/common/PathOwners.java",
        "patchSetId": 1
      },
      "lineNbr": 247,
      "author": {
        "id": 1025452
      },
      "writtenOn": "2022-11-28T20:10:06Z",
      "side": 1,
      "message": "condition not needed, this is the end of the processing in this function",
      "range": {
        "startLine": 245,
        "startChar": 4,
        "endLine": 247,
        "endChar": 5
      },
      "revId": "71fa65697e4b6f6face6040e1b7851bea0fdac4a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    },
    {
      "unresolved": true,
      "key": {
        "uuid": "be6bfd0e_eaabe01a",
        "filename": "owners-common/src/main/java/com/googlesource/gerrit/owners/common/PathOwners.java",
        "patchSetId": 1
      },
      "lineNbr": 266,
      "author": {
        "id": 1054778
      },
      "writtenOn": "2022-11-28T20:44:21Z",
      "side": 1,
      "message": "Here you could return `!newMatchers.isEmpty()` and avoid having the extra variable `matchingFound`.",
      "revId": "71fa65697e4b6f6face6040e1b7851bea0fdac4a",
      "serverId": "173816e5-2b9a-37c3-8a2e-48639d4f1153"
    }
  ]
}